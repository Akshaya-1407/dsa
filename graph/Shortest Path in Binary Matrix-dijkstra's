typedef pair<int,pair<int,int>> p;
    vector<vector<int>> directions{{1,1},{0,1},{1,0},{-1,0},{0,-1},{-1,-1},{1,-1},{-1,1}};
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        if(m == 0 || n == 0 || grid[0][0] != 0){
            return -1;
        }

        auto isSafe = [&](int x,int y){
            return x>=0 && x<m && y>=0 &&y<n;
        };

        vector<vector<int>> res(m,vector<int>(n,INT_MAX));

        priority_queue<p,vector<p>,greater<p>> pq;

        pq.push({0,{0,0}});
        res[0][0] = 0;

        while(!pq.empty()){
            int d = pq.top().first;
            pair<int,int> node = pq.top().second;
            int x = node.first;
            int y = node.second;
            pq.pop();

            for(auto dir : directions){
                int x_ = x+dir[0];
                int y_ = y+dir[1];

                if(isSafe(x_,y_) && grid[x_][y_]==0 && d+1<res[x_][y_]){
                    pq.push({d+1,{x_,y_}});
                    res[x_][y_] = d+1;
                }
            }
        }

        if(res[m-1][n-1] == INT_MAX){
            return -1;
        }
        return res[m-1][n-1]+1;
    }
