class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        unordered_map<int,vector<pair<int,int>>>adj;
        for(auto &vec : times){
            int u = vec[0];
            int v = vec[1];
            int wt = vec[2];

            adj[u].push_back({v,wt});
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;

        vector<int> res(n+1,INT_MAX);

        res[k] = 0;
        pq.push({0,k});

        while(!pq.empty()){
            int d = pq.top().first;
            int node = pq.top().second;
            pq.pop();
            for(auto &it : adj[node]){
                int adjnode = it.first;
                int dist = it.second;

                if(d + dist < res[adjnode]){
                    res[adjnode] = d + dist;
                    pq.push({d+dist,adjnode});
                }
            }
        }
        int ans = INT_MIN;
        for(int i = 1 ; i <= n ; i++){
            ans = max(res[i],ans); 
        }
        return ans == INT_MAX?-1 : ans;
    }
};
