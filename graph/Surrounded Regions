class Solution {
public:
    void dfs(vector<vector<int>> &vis,vector<vector<char>> &board,int row,int col,int n , int m,int dx[],int dy[]){
        vis[row][col] = 1;
        

        for(int i = 0 ;i<4 ; i++){
            int nx = row + dx[i];
            int ny = col + dy[i];

            if(nx>=0 && nx< n && ny>= 0 && ny < m && vis[nx][ny] == 0 && board[nx][ny] == 'O'){
                dfs(vis,board,nx,ny,n,m,dx,dy);
            }
        }
    }
    void solve(vector<vector<char>>& board) {
        int n = board.size();
        int m = board[0].size();
        int dx[] = {-1,0,1,0};
        int dy[] = {0,1,0,-1};
        vector<vector<int>> vis(n,vector<int>(m,0));

        for(int j = 0 ; j < m ; j++){
            if(vis[0][j] == 0 && board[0][j] == 'O'){
                dfs(vis,board,0,j,n,m,dx,dy);
            }
            if(vis[n-1][j]==0 && board[n-1][j] == 'O'){
                dfs(vis,board,n-1,j,n,m,dx,dy);
            }
        }

        for(int i = 0 ; i < n ;i++){
            if(vis[i][0] == 0 && board[i][0] == 'O'){
                dfs(vis,board,i,0,n,m,dx,dy);
            }
            if(vis[i][m-1] == 0 && board[i][m-1] == 'O'){
                dfs(vis,board,i,m-1,n,m,dx,dy);
            }
        }

        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(vis[i][j] == 0 && board[i][j] == 'O'){
                    board[i][j] = 'X';
                }
            }
        }
    }
};
