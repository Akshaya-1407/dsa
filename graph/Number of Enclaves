class Solution {
public:
    void dfs(vector<vector<int>> &vis,vector<vector<int>> &grid,int n ,int m,int dx[],int dy[],int row,int col){
        vis[row][col] = 1;
        for(int i = 0 ; i < 4 ; i++){
            int nx = row + dx[i];
            int ny = col + dy[i];
            if(nx>=0 && nx < n && ny>= 0 && ny < m && vis[nx][ny] == 0 && grid[nx][ny] == 1){
                dfs(vis,grid,n,m,dx,dy,nx,ny);
            }
        }
    }
    int numEnclaves(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int cnt = 0;
        int dx[] = {-1,0,1,0};
        int dy[] = {0,1,0,-1};
        vector<vector<int>> vis(n,vector<int>(m,0));

        for(int j = 0 ; j < m ; j++){
            if(vis[0][j] == 0 && grid[0][j] == 1){
                dfs(vis,grid,n,m,dx,dy,0,j);
            }
            if(vis[n-1][j] == 0 && grid[n-1][j] == 1){
                dfs(vis,grid,n,m,dx,dy,n-1,j);
            }
        }
        for(int i = 0 ; i < n ; i++){
            if(vis[i][0] == 0 && grid[i][0] == 1){
                dfs(vis,grid,n,m,dx,dy,i,0);
            }
            if(vis[i][m-1] == 0 && grid[i][m-1] == 1){
                dfs(vis,grid,n,m,dx,dy,i,m-1);
            }
        }
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(vis[i][j] == 0 && grid[i][j] == 1){
                    cnt++;
                }
            }
        }
        return cnt;
    }
};
