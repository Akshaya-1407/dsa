class Solution {
public:
    int solve(vector<int>& nums,int s1,int n){
        int z = 0;

        for (int i = 0; i < nums.size(); i++)

            if (nums[i] == 0)

                z++;

        int t[n+1][s1+1];
        for(int i = 0 ; i < n+1 ; i++){
            for(int j = 0 ; j < s1+1 ; j++){
                if(i == 0){
                    t[i][j] = 0;
                }
                if(j == 0){
                    t[i][j] = 1;
                }
            }
        }

        for(int i = 1 ; i < n+1 ; i++){
            for(int j = 1 ; j < s1+1 ; j++){
                

                if(nums[i-1]>j || nums[i-1] == 0){
                    t[i][j] = t[i-1][j];
                }
                else if(nums[i-1]<=j){
                    t[i][j] = t[i-1][j] + t[i-1][j-nums[i-1]];
                }
            }
        }
        return (int)pow(2, z) * t[n][s1] ;
    }
    int findTargetSumWays(vector<int>& nums, int target) {
        target = abs(target);
        int n = nums.size();
        int sum = 0;
        for(int i = 0 ; i < n ; i++){
            sum += nums[i];
        }

        int s1 = (target+sum)/2;
        if(sum<target||(sum+target)%2!=0)
            return 0;
        return solve(nums,s1,n);
    }
};
